{"version":3,"sources":["webpack://_N_E/./actions/setSelectedMenuItemName.js","webpack://_N_E/./components/SortBy/index.js","webpack://_N_E/./components/UI/FormControl/index.js","webpack://_N_E/./components/UI/Label/index.js","webpack://_N_E/./components/UI/TheSelectSearch/index.js","webpack://_N_E/./actions/getGenreMovies.js","webpack://_N_E/./pages/genre/index.js","webpack://_N_E/./utils/constants/select-search.js","webpack://_N_E/?a666","webpack://_N_E/./components/UI/TheSelectSearch/default-style.module.css"],"names":["name","dispatch","type","TYPES","payload","props","options","SORT_BY_OPTIONS","CLASS_NAME","className","rest","clsx","TheSelectSearch","forwardRef","ref","id","label","classes","htmlFor","key","defaultClasses","renderValue","valueProps","genreId","page","sort","getState","general","selectedMenuItemName","tmdbAPI","TMDB_API_VERSION","params","with_genres","sort_by","response","data","console","log","Router","LINKS","useDispatch","useSelector","state","movies","query","useRouter","useState","sortByOptionValue","setSortByOptionValue","QUERY_PARAMS","genreName","Number","useEffect","setSelectedMenuItemName","clearMovies","checkEmptyObject","initialGenreId","initialGenreName","newGenreId","newGenreName","pathname","scroll","smooth","getGenreMovies","loading","Loader","baseUrl","base","images","secure_base_url","PageWrapper","PaddingWrapper","Header","title","subtitle","SortBy","value","onChange","newSortByOptionValue","MovieList","YES_OR_NO_OPTIONS","window","__NEXT_P","push","module","exports"],"mappings":"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","file":"static/chunks/pages/genre-13aa79a6d7b5c15542dc.js","sourcesContent":["\nimport * as TYPES from './types';\n\n// Set the current selected menu item (discover or genre) if is valid\nconst setSelectedMenuItemName = name => dispatch => {\n  if (!name) {\n    dispatch({type: TYPES.UNSET_SELECTED_MENU_ITEM_NAME});\n  } else {\n    dispatch({\n      type: TYPES.SET_SELECTED_MENU_ITEM_NAME,\n      payload: name\n    });\n  }\n};\n\nexport default setSelectedMenuItemName;\n","\n\nimport TheSelectSearch from 'components/UI/TheSelectSearch';\nimport { SORT_BY_OPTIONS } from 'utils/constants/select-search';\n\n// TODO: it's static (options are hardcoded) now but it should be dynamically populated using async feature of react-select-search package\nconst SortBy = props => (\n  <TheSelectSearch\n    options={SORT_BY_OPTIONS}\n    {...props} />\n);\n\nexport default SortBy;\n","\n\nimport clsx from 'clsx';\n\nconst CLASS_NAME = 'form-control';\n\nconst FormControl = ({\n  className,\n  ...rest\n}) => (\n  <>\n    <div\n      className={clsx(CLASS_NAME, className)}\n      {...rest} />\n    <style jsx>{`\n      .${CLASS_NAME} {\n        margin: 8px 0;\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n      }\n      .${CLASS_NAME} > :global(label + *) {\n        margin-top: 4px;\n      }\n    `}</style>\n  </>\n);\n\nexport default FormControl;\n","\n\nimport clsx from 'clsx';\n\nconst CLASS_NAME = 'label';\n\nconst Label = ({\n  className,\n  ...rest\n}) => (\n  <>\n    <label\n      className={clsx(CLASS_NAME, className)}\n      {...rest} />\n    <style jsx>{`\n      .${CLASS_NAME} {\n        font-size: 1.5rem;\n      }\n    `}</style>\n  </>\n);\n\nexport default Label;\n","\n\nimport SelectSearch from 'react-select-search/dist/cjs';\nimport clsx from 'clsx';\n\nimport Label from 'components/UI/Label';\nimport FormControl from 'components/UI/FormControl';\nimport defaultClasses from 'components/UI/TheSelectSearch/default-style.module.css';\n\nconst TheSelectSearch = React.forwardRef(({\n  id,\n  name,\n  label,\n  classes,\n  ...rest\n}, ref) => (\n  <>\n    <FormControl>\n      {label && <Label htmlFor={id}>{label}</Label>}\n      <SelectSearch\n        ref={ref}\n        className={key => clsx(defaultClasses?.[key], classes?.[key])}\n        renderValue={valueProps => (\n          <input\n            id={id}\n            name={name}\n            className={clsx(defaultClasses?.['input'], classes?.['input'])}\n            {...valueProps} />\n        )}\n        {...rest} />\n    </FormControl>\n  </>\n));\n\nexport default TheSelectSearch;\n","import Router from 'next/router';\n\nimport * as TYPES from './types';\nimport tmdbAPI from 'services/tmdbAPI';\nimport LINKS from 'utils/constants/links';\nimport { TMDB_API_VERSION } from 'config/tmdb';\n\nconst getGenreMovies = (genreId, page, sort) => async (\n  dispatch,\n  getState\n) => {\n  const { selectedMenuItemName } = getState().general;\n  if (!selectedMenuItemName) {\n    return;\n  }\n  try {\n    dispatch({type: TYPES.SET_MOVIES_LOADING});\n    const response = await tmdbAPI.get(`/${TMDB_API_VERSION}/discover/movie`, {\n      params: {\n        with_genres: genreId,\n        page,\n        sort_by: sort\n      }\n    });\n    await dispatch({\n      type: TYPES.FETCH_GENRE_MOVIES,\n      payload: response.data\n    });\n    dispatch({type: TYPES.UNSET_MOVIES_LOADING});\n  } catch (error) {\n    console.log('[getGenreMovies] error => ', error);\n    dispatch({type: TYPES.INSERT_ERROR, payload: error.response});\n    Router.push(LINKS.ERROR.HREF);\n  }\n};\n\nexport default getGenreMovies;\n","\nimport { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport Router, { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { animateScroll as scroll } from 'react-scroll';\n\nimport Header from 'parts/Header';\nimport PageWrapper from 'parts/PageWrapper';\nimport PaddingWrapper from 'parts/PaddingWrapper';\nimport MovieList from 'components/MovieList';\nimport Loader from 'components/UI/Loader';\nimport SortBy from 'components/SortBy';\nimport setSelectedMenuItemName from 'actions/setSelectedMenuItemName';\nimport getGenreMovies from 'actions/getGenreMovies';\nimport clearMovies from 'actions/clearMovies';\nimport { SORT_BY_OPTIONS } from 'utils/constants/select-search';\nimport QUERY_PARAMS from 'utils/constants/query-params';\nimport LINKS from 'utils/constants/links';\nimport checkEmptyObject from 'utils/helpers/checkEmptyObject';\n\nconst Genre = () => {\n  const dispatch = useDispatch();\n  const general = useSelector(state => state.general);\n  const movies = useSelector(state => state.movies);\n  const { query } = useRouter();\n  const [sortByOptionValue, setSortByOptionValue] = useState(SORT_BY_OPTIONS[0].value);\n\n  const genreId = query[QUERY_PARAMS.ID];\n  const genreName = query[QUERY_PARAMS.NAME];\n  const page = Number(query[QUERY_PARAMS.PAGE]);\n\n  useEffect(() => {\n    return () => {\n      dispatch(setSelectedMenuItemName());\n      dispatch(clearMovies());\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (checkEmptyObject(query)) return;\n\n    const initialGenreId = Router.query[QUERY_PARAMS.ID];\n    const initialGenreName = Router.query[QUERY_PARAMS.NAME];\n    const initialPage = Router.query[QUERY_PARAMS.PAGE];\n\n    if (!initialPage) {\n      const newGenreId = initialGenreId;\n      const newGenreName = initialGenreName;\n      const newPage = 1;\n      console.log('[Genre useEffect] query parameter update: newGenreId, newGenreName, newPage => ', newGenreId, newGenreName, newPage);\n      Router.replace({\n        pathname: LINKS.GENRE.HREF,\n        query: {\n          [QUERY_PARAMS.ID]: newGenreId,\n          [QUERY_PARAMS.NAME]: newGenreName,\n          [QUERY_PARAMS.PAGE]: newPage\n        }\n      });\n    }\n  }, [dispatch, query]);\n\n  useEffect(() => {\n    (async () => {\n      if (!genreId || !genreName || !page || !sortByOptionValue) return;\n      \n      scroll.scrollToTop({smooth: true});\n\n      await dispatch(setSelectedMenuItemName(genreName));\n      dispatch(getGenreMovies(genreId, page, sortByOptionValue));\n    })();\n  }, [genreId, genreName, page, sortByOptionValue, dispatch]);\n\n  if (movies.loading) {\n    return <Loader />;\n  }\n\n  const { secure_base_url: baseUrl } = general.base.images;\n\n  const sortByOptionValueOnChangeHandler = newSortByOptionValue => {\n    setSortByOptionValue(newSortByOptionValue);\n  };\n\n  return (\n    <PageWrapper>\n      <PaddingWrapper>\n        <Head>\n          <title>{`${general.selectedMenuItemName} Movies`}</title>\n        </Head>\n        <Header\n          title={general.selectedMenuItemName}\n          subtitle='movies' />\n        <SortBy\n          value={sortByOptionValue}\n          onChange={sortByOptionValueOnChangeHandler} />\n        <MovieList\n          movies={movies}\n          baseUrl={baseUrl} />\n      </PaddingWrapper>\n    </PageWrapper>\n  );\n};\n\nexport default Genre;\n","\n// TODO: vulnerable\nconst YES_OR_NO_OPTIONS = [\n  {value: 'true', name: 'Yes'},\n  {value: 'false', name: 'No'}\n];\n\nconst SORT_BY_OPTIONS = [\n  {value: 'popularity.desc', name: 'Popularity'},\n  {value: 'vote_average.desc', name: 'Votes Average'},\n  {value: 'original_title.asc', name: 'Original Title'},\n  {value: 'release_date.desc', name: 'Release Date'}\n];\n\nexport {\n  YES_OR_NO_OPTIONS,\n  SORT_BY_OPTIONS\n};\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/genre\",\n      function () {\n        return require(\"private-next-pages/genre/index.js\");\n      }\n    ]);\n  ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"default-style_container__13fu8\",\"value\":\"default-style_value__YD4jJ\",\"input\":\"default-style_input__2frfg\",\"select\":\"default-style_select__Kx5x7\",\"options\":\"default-style_options__1gC1c\",\"row\":\"default-style_row__2Q9eo\",\"option\":\"default-style_option__2m1oc\",\"container--multiple\":\"default-style_container--multiple__2GS6E\",\"is-selected\":\"default-style_is-selected__23CGe\",\"is-highlighted\":\"default-style_is-highlighted__1Y94J\",\"group-header\":\"default-style_group-header__2nCzE\",\"is-disabled\":\"default-style_is-disabled__3x3Z9\",\"is-loading\":\"default-style_is-loading__1SDV8\",\"container--search\":\"default-style_container--search__2GALE\"};"],"sourceRoot":""}