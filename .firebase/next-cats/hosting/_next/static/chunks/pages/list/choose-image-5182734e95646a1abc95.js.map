{"version":3,"sources":["webpack://_N_E/./containers/ListNavigation/index.js","webpack://_N_E/./parts/ChooseImageItem/index.js","webpack://_N_E/./pages/list/choose-image/index.js","webpack://_N_E/?5aee"],"names":["listId","pathname","useRouter","updateListLinks","title","href","LINKS","query","QUERY_PARAMS","disabled","createListLinks","listLinks","map","listLink","selected","SCENERY_CONTAINER_CLASS_NAME","GRAY_FILTERED_CLASS_NAME","theme","movie","baseUrl","text","textAlwaysVisible","rest","height","offset","typography","fontWeightBold","transitions","duration","shorter","easing","easeInOut","Scenery","overlayClass","width","W355_AND_H200_BESTV2","src","backdrop_path","PosterTitle","style","marginTop","BACKDROP_STATUSES","withAuth","withTheme","accountId","accessToken","useState","STATUSES","status","setStatus","chooseImageStatus","setChooseImageStatus","error","setError","movies","setMovies","page","Number","useEffect","scroll","smooth","tmdbAPI","TMDB_API_NEW_VERSION","headers","params","response","data","created_by","id","Error","console","log","chooseImageHandler","useCallback","backdropPath","body","config","prevState","Loader","NotFound","subtitle","message","name","PageWrapper","PaddingWrapper","Header","description","ListNavigation","total_results","BackdropsGridContainer","results","backdropStatus","onClick","TMDB_IMAGE_BASE_URL","Pagination","totalPages","total_pages","window","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/list/choose-image-5182734e95646a1abc95.js","sourcesContent":["\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nimport Navbar, { NavbarItem } from 'components/UI/Navbar';\nimport LINKS from 'utils/constants/links';\nimport QUERY_PARAMS from 'utils/constants/query-params';\n\nconst ListNavigation = ({ listId }) => {\n  const { pathname } = useRouter();\n\n  const updateListLinks = [\n    {\n      title: 'Edit List',\n      href: {\n        pathname: LINKS.ADD_OR_EDIT_LIST.HREF,\n        query: {[QUERY_PARAMS.ID]: listId}\n      },\n      disabled: false\n    },\n    {\n      title: 'View List',\n      href: {\n        pathname: LINKS.LIST.HREF,\n        query: {\n          [QUERY_PARAMS.ID]: listId,\n          [QUERY_PARAMS.PAGE]: 1\n        }\n      },\n      disabled: false\n    },\n    {\n      title: 'Add/Remove Items',\n      href: {\n        pathname: LINKS.ADD_OR_REMOVE_ITEMS_AT_LIST.HREF,\n        query: {\n          [QUERY_PARAMS.LIST_ID]: listId,\n          [QUERY_PARAMS.PAGE]: 1\n        }\n      },\n      disabled: false\n    },\n    {\n      title: 'Choose Image',\n      href: {\n        pathname: LINKS.CHOOSE_LIST_IMAGE.HREF,\n        query: {[QUERY_PARAMS.LIST_ID]: listId, [QUERY_PARAMS.PAGE]: 1}\n      },\n      disabled: false\n    },\n    {\n      title: 'Delete List',\n      href: {\n        pathname: LINKS.REMOVE_LIST.HREF,\n        query: {[QUERY_PARAMS.ID]: listId}\n      },\n      disabled: false\n    }\n  ];\n\n  const createListLinks = [\n    {\n      title: 'Step1: List Details',\n      href: {\n        pathname: LINKS.ADD_OR_EDIT_LIST.HREF\n      },\n      disabled: false\n    },\n    {\n      title: 'Step2: Add Items',\n      href: {\n        pathname: LINKS.ADD_OR_REMOVE_ITEMS_AT_LIST.HREF\n      },\n      disabled: true\n    },\n    {\n      title: 'Step3: Choose Image',\n      href: {\n        pathname: LINKS.CHOOSE_LIST_IMAGE.HREF\n      },\n      disabled: true\n    }\n  ];\n\n  let listLinks = listId ? updateListLinks : createListLinks;\n\n  return (\n    <Navbar>\n      {listLinks.map(listLink => (\n        <NavbarItem\n          key={listLink.title}\n          disabled={listLink.disabled}\n          selected={pathname === listLink.href.pathname}>\n          <Link\n            href={listLink.href}>\n            <a>{listLink.title}</a>\n          </Link>\n        </NavbarItem>  \n      ))}\n    </Navbar>\n  );\n};\n\nexport default ListNavigation;\n","\n\nimport LazyLoad from 'react-lazyload';\n\nimport Scenery from 'components/Scenery';\nimport PosterTitle from 'components/PosterTitle';\nimport {\n  W355_AND_H200_BESTV2,\n  // W710_AND_H400_BESTV2\n} from 'config/image-sizes';\n\n/**\n * TODO:\n * Should use srcset approach to serve responsive images. Re: https://web.dev/serve-responsive-images/\n */\n\nconst SCENERY_CONTAINER_CLASS_NAME = 'scenery-container';\nconst GRAY_FILTERED_CLASS_NAME = 'gray-filtered';\n\nconst ChooseImageItem = ({\n  theme,\n  movie,\n  baseUrl,\n  text,\n  textAlwaysVisible,\n  ...rest\n}) => (\n  <>\n    <LazyLoad\n      height={200}\n      offset={200}>\n      <button\n        className={SCENERY_CONTAINER_CLASS_NAME}\n        {...rest}>\n        <Scenery\n          overlayClass={GRAY_FILTERED_CLASS_NAME}\n          width={W355_AND_H200_BESTV2.WIDTH}\n          height={W355_AND_H200_BESTV2.HEIGHT}\n          // TODO: placeholder is broken with it\n          // srcSet={`${baseUrl}/${W355_AND_H200_BESTV2.FULL}${movie.backdrop_path} 1x, ${baseUrl}/${W710_AND_H400_BESTV2.FULL}${movie.backdrop_path} 2x`} \n          src={`${baseUrl}${W355_AND_H200_BESTV2.FULL}${movie.backdrop_path}`} />\n        <h2>{text}</h2>\n      </button>\n      <PosterTitle\n        // TODO: hack for UI adjusting\n        style={{\n          marginTop: '1.5rem'\n        }}\n        theme={theme}>\n        {movie.title}\n      </PosterTitle>\n    </LazyLoad>\n    <style jsx>{`\n      .${SCENERY_CONTAINER_CLASS_NAME} {\n        position: relative;\n        width: 100%;\n        border: none;\n      }\n\n      .${SCENERY_CONTAINER_CLASS_NAME} > h2 {\n        opacity: ${textAlwaysVisible ? '1' : '0'};\n        visibility: ${textAlwaysVisible ? 'visible' : 'hidden'};\n        position: absolute;\n        top: 50%;\n        transform: translate(0%, -50%);\n        width: 100%;\n        min-height: 40px;\n        color: var(--palette-text-primary);\n        font-size: 1.5rem;\n        font-weight: ${theme.typography.fontWeightBold};\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background-color: var(--palette-custom-tmdbLightBlue);\n        transition: ${theme.transitions.duration.shorter}ms;\n      }\n\n      .${SCENERY_CONTAINER_CLASS_NAME}:hover > h2 {\n        opacity: 1;\n        visibility: visible;\n      }\n\n      .${SCENERY_CONTAINER_CLASS_NAME}:disabled, .${SCENERY_CONTAINER_CLASS_NAME} {\n        color: inherit;\n        background-color: inherit;\n      }\n\n      :global(.${GRAY_FILTERED_CLASS_NAME}:hover) {\n        filter: grayscale(100%);\n        transition: filter ${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeInOut};\n      }\n    `}</style>\n  </>\n);\n\nexport default ChooseImageItem;\n","\n\nimport {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { animateScroll as scroll } from 'react-scroll';\n\nimport Header from 'parts/Header';\nimport NotFound from 'parts/NotFound';\nimport PageWrapper from 'parts/PageWrapper';\nimport PaddingWrapper from 'parts/PaddingWrapper';\nimport ChooseImageItem from 'parts/ChooseImageItem';\nimport ListNavigation from 'containers/ListNavigation';\nimport BackdropsGridContainer from 'components/BackdropsGridContainer';\nimport Pagination from 'components/Pagination';\nimport Loader from 'components/UI/Loader';\nimport withTheme from 'utils/hocs/withTheme';\nimport withAuth from 'utils/hocs/withAuth';\nimport QUERY_PARAMS from 'utils/constants/query-params';\nimport STATUSES from 'utils/constants/statuses';\nimport { TMDB_API_NEW_VERSION, TMDB_IMAGE_BASE_URL } from 'config/tmdb';\nimport tmdbAPI from 'services/tmdbAPI';\n\nconst BACKDROP_STATUSES = {\n  SELECTED: 'SELECTED',\n  SELECTING: 'SELECTING',\n  SELECT: 'SELECT'\n};\n\nconst ChooseImage = ({\n  theme,\n  accountId,\n  accessToken\n}) => {\n  const { query } = useRouter();\n\n  const [status, setStatus] = useState(STATUSES.IDLE);\n  const [chooseImageStatus, setChooseImageStatus] = useState(STATUSES.IDLE);\n  // TODO: could handle errors\n  const [error, setError] = useState(null);\n  // const [chooseImageError, setChooseImageError] = useState(null);\n\n  const [movies, setMovies] = useState(null);\n\n  const page = Number(query[QUERY_PARAMS.PAGE]);\n  const listId = query[QUERY_PARAMS.LIST_ID];\n\n  useEffect(() => {\n    (async () => {\n      if (!page) return;\n      if (!listId) return;\n      if (!accessToken) return;\n      if (!accountId) return;\n\n      scroll.scrollToTop({smooth: true});\n\n      try {\n        setStatus(STATUSES.PENDING);\n        const response = await tmdbAPI.get(`/${TMDB_API_NEW_VERSION}/list/${listId}`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`\n          },\n          params: {\n            page\n          }\n        });\n        const movies = response.data;\n        if (movies.created_by.id === accountId) {\n          setMovies(movies);\n        } else {\n          throw new Error('You don\\'t seem to have access to this page.');\n        }\n      } catch (error) {\n        console.log('[ChooseImage useEffect] error => ', error);\n        setStatus(STATUSES.REJECTED);\n        setError(error);\n      }\n    })();\n  }, [page, listId, accessToken, accountId]);\n\n  useEffect(() => {\n    if (!movies) return;\n\n    setStatus(STATUSES.RESOLVED);\n  }, [movies]);\n\n  const chooseImageHandler = useCallback(backdropPath => async () => {\n    try {\n      setChooseImageStatus(STATUSES.PENDING);\n\n      const body = {\n        backdrop_path: backdropPath\n      };\n      const config = {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      };\n      await tmdbAPI.put(`/${TMDB_API_NEW_VERSION}/list/${listId}`, body, config);\n\n      setChooseImageStatus(STATUSES.RESOLVED);\n\n      setMovies(prevState => {\n        const nextState = {\n          ...prevState,\n          backdrop_path: backdropPath\n        };\n\n        return nextState;\n      });\n    } catch (error) {\n      console.log('[ChooseImage chooseImageHandler] error => ', error);\n      setChooseImageStatus(STATUSES.REJECTED);\n      // setChooseImageError(error);\n    }\n  }, [accessToken, listId]);\n\n  if (status === STATUSES.IDLE || status === STATUSES.PENDING) {\n    return <Loader />;\n  }\n\n  if (status === STATUSES.REJECTED) {\n    // TODO: should show proper error message based on error state\n    return (\n      <NotFound\n        title='Sorry!'\n        subtitle={error?.message ?? 'We can\\'t find the page you\\'re looking for...'} />\n    );\n  }\n\n  if (status === STATUSES.RESOLVED) {\n    return (\n      <>\n        <Head>\n          <title>{movies.name}</title>\n        </Head>\n        <PageWrapper>\n          <PaddingWrapper>\n            <Header\n              title={movies.name || 'No name'}\n              subtitle={movies.description || 'No description'} />\n            <ListNavigation listId={listId} />\n              {movies.total_results === 0 ? (\n                <NotFound\n                  title='Sorry!'\n                  subtitle='There are no items added to this list....' />\n              ) : (\n                <>\n                  <BackdropsGridContainer theme={theme}>\n                    {movies.results.map(movie => {\n                      let backdropStatus;\n                      if (chooseImageStatus === STATUSES.PENDING) {\n                        backdropStatus = BACKDROP_STATUSES.SELECTING;\n                      } else {\n                        backdropStatus = BACKDROP_STATUSES.SELECT;\n                      }\n                      if (movies.backdrop_path === movie.backdrop_path) {\n                        backdropStatus = BACKDROP_STATUSES.SELECTED;\n                      }\n\n                      const disabled = backdropStatus === BACKDROP_STATUSES.SELECTING || backdropStatus === BACKDROP_STATUSES.SELECTED;\n                      const textAlwaysVisible = backdropStatus === BACKDROP_STATUSES.SELECTED;\n\n                      return (\n                        <ChooseImageItem\n                          theme={theme}\n                          key={movie.id}\n                          movie={movie}\n                          text={backdropStatus}\n                          textAlwaysVisible={textAlwaysVisible}\n                          disabled={disabled}\n                          onClick={chooseImageHandler(movie.backdrop_path)}\n                          baseUrl={TMDB_IMAGE_BASE_URL} />\n                      );\n                    })}\n                  </BackdropsGridContainer>\n                  <Pagination\n                    page={movies.page}\n                    totalPages={movies.total_pages} />\n                </>\n              )}\n          </PaddingWrapper>\n        </PageWrapper>\n      </>\n    );\n  }\n};\n\nexport default withAuth(withTheme(ChooseImage));\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/list/choose-image\",\n      function () {\n        return require(\"private-next-pages/list/choose-image/index.js\");\n      }\n    ]);\n  "],"sourceRoot":""}